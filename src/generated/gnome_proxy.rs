//! # D-Bus interface proxy for: `org.gnome.Mutter.DisplayConfig`
//!
//! This code was generated by `zbus-xmlgen` `5.1.0` from D-Bus introspection data.
//! Source: `Interface '/org/gnome/Mutter/DisplayConfig' from service 'org.gnome.Mutter.DisplayConfig' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "org.gnome.Mutter.DisplayConfig",
    default_service = "org.gnome.Mutter.DisplayConfig",
    default_path = "/org/gnome/Mutter/DisplayConfig"
)]
pub trait DisplayConfig {
    /// ApplyConfiguration method
    #[allow(clippy::type_complexity)]
    fn apply_configuration(
        &self,
        serial: u32,
        persistent: bool,
        crtcs: &[&(
            u32,
            i32,
            i32,
            i32,
            u32,
            &[u32],
            std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
        )],
        outputs: &[&(
            u32,
            std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
        )],
    ) -> zbus::Result<()>;

    /// ApplyMonitorsConfig method
    #[allow(clippy::type_complexity)]
    fn apply_monitors_config(
        &self,
        serial: u32,
        method: u32,
        logical_monitors: &[&(
            i32,
            i32,
            f64,
            u32,
            bool,
            &[&(
                &str,
                &str,
                std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
            )],
        )],
        properties: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// ChangeBacklight method
    fn change_backlight(&self, serial: u32, output: u32, value: i32) -> zbus::Result<i32>;

    /// GetCrtcGamma method
    fn get_crtc_gamma(
        &self,
        serial: u32,
        crtc: u32,
    ) -> zbus::Result<(Vec<u16>, Vec<u16>, Vec<u16>)>;

    /// GetCurrentState method
    #[allow(clippy::type_complexity)]
    #[allow(clippy::type_complexity)]
    fn get_current_state(
        &self,
    ) -> zbus::Result<(
        u32,
        Vec<(
            (String, String, String, String),
            Vec<(
                String,
                i32,
                i32,
                f64,
                f64,
                Vec<f64>,
                std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
            )>,
            std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
        )>,
        Vec<(
            i32,
            i32,
            f64,
            u32,
            bool,
            Vec<(String, String, String, String)>,
            std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
        )>,
        std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
    )>;

    /// GetResources method
    #[allow(clippy::type_complexity)]
    #[allow(clippy::type_complexity)]
    fn get_resources(
        &self,
    ) -> zbus::Result<(
        u32,
        Vec<(
            u32,
            i64,
            i32,
            i32,
            i32,
            i32,
            i32,
            u32,
            Vec<u32>,
            std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
        )>,
        Vec<(
            u32,
            i64,
            i32,
            Vec<u32>,
            String,
            Vec<u32>,
            Vec<u32>,
            std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
        )>,
        Vec<(u32, i64, u32, u32, f64, u32)>,
        i32,
        i32,
    )>;

    /// SetBacklight method
    fn set_backlight(&self, serial: u32, connector: &str, value: i32) -> zbus::Result<()>;

    /// SetCrtcGamma method
    fn set_crtc_gamma(
        &self,
        serial: u32,
        crtc: u32,
        red: &[u16],
        green: &[u16],
        blue: &[u16],
    ) -> zbus::Result<()>;

    /// SetOutputCTM method
    #[zbus(name = "SetOutputCTM")]
    fn set_output_ctm(
        &self,
        serial: u32,
        output: u32,
        ctm: &(u64, u64, u64, u64, u64, u64, u64, u64, u64),
    ) -> zbus::Result<()>;

    /// MonitorsChanged signal
    #[zbus(signal)]
    fn monitors_changed(&self) -> zbus::Result<()>;

    /// ApplyMonitorsConfigAllowed property
    #[zbus(property)]
    fn apply_monitors_config_allowed(&self) -> zbus::Result<bool>;

    /// Backlight property
    #[zbus(property)]
    fn backlight(
        &self,
    ) -> zbus::Result<(
        u32,
        Vec<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>,
    )>;

    /// HasExternalMonitor property
    #[zbus(property)]
    fn has_external_monitor(&self) -> zbus::Result<bool>;

    /// NightLightSupported property
    #[zbus(property)]
    fn night_light_supported(&self) -> zbus::Result<bool>;

    /// PanelOrientationManaged property
    #[zbus(property)]
    fn panel_orientation_managed(&self) -> zbus::Result<bool>;

    /// PowerSaveMode property
    #[zbus(property)]
    fn power_save_mode(&self) -> zbus::Result<i32>;
    #[zbus(property)]
    fn set_power_save_mode(&self, value: i32) -> zbus::Result<()>;
}
